openapi: 3.1.0
info:
  title: Otim API
  description: The API docs for Otim
  license:
    name: MIT
  version: 1.0.0
servers:
  - url: https://api.otim.com
    description: Production server
paths:
  /auth/login:
    post:
      description: Log in a user using SIWE
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - siwe
                - signature
              properties:
                siwe:
                  type: string
                  description: SIWE message
                  example: "Welcome to Otim! By signing in, you..."
                signature:
                  type: string
                  description: Signature of the SIWE message
                  example: "0x..."
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorization:
                    type: string
                    description: JWT token for API authentication
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  /auth/logout:
    post:
      description: Log out a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties: {}
  /config/chains:
    get:
      description: Get list of supported chains
      responses:
        '200':
          description: Chain list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chains:
                    type: array
                    items:
                      type: object
                      properties:
                        chainId:
                          type: integer
                          format: int64
                          example: 11155111
                        chainName:
                          type: string
                          example: "Sepolia"
  /config/delegate/address/{chainId}:
    get:
      description: Get delegate address for a specific chain
      parameters:
        - name: chainId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Chain ID
      responses:
        '200':
          description: Delegate address retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  otimDelegateAddress:
                    type: string
                    description: Ethereum address in hex format
                    example: "0x..."
  /config/instruction_storage/address/{chainId}:
    get:
      description: Get instruction storage address for a specific chain
      parameters:
        - name: chainId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Chain ID
      responses:
        '200':
          description: Instruction storage address retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  instructionStorageAddress:
                    type: string
                    description: Ethereum address in hex format
                    example: "0x..."

  /config/tokens/{chainId}:
    get:
      description: Get list of supported tokens for a specific chain
      parameters:
        - name: chainId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Chain ID
      responses:
        '200':
          description: Token list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokens:
                    type: array
                    items:
                      type: string
                    example: ["USDC", "USDT"]
  /delegation/new:
    post:
      description: Create a new delegation to Otim
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - signedAuthorization
                - signerAddress
              properties:
                signedAuthorization:
                  type: string
                  description: "Signed RLP-encoded [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) authorization: `keccak(MAGIC || rlp([chain_id, address, nonce]))`"
                  example: "0x..."
                signerAddress:
                  type: string
                  description: Address of the signer who signed the `signedAuthorization`
                  example: "0x..."
      responses:
        '201':
          description: Delegation created successfully
  /delegation/status:
    get:
      description: Get Otim delegation status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - address
                - chainId
              properties:
                address:
                  type: string
                  description: Address to check delegation status
                  example: "0x..."
                chainId:
                  type: integer
                  format: int64
                  description: Chain ID
      responses:
        '200':
          description: Delegation status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  delegationStatus:
                    type: string
                    example: "Delegated"
  /instruction/build:
    post:
      description: Build an Otim instruction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildInstructionRequest'
      responses:
        '200':
          description: Instruction built successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildInstructionResponse'
  /instruction/new:
    post:
      description: Activate a built Otim instruction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewInstructionRequest'
      responses:
        '201':
          description: Instruction created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  instructionId:
                    type: string
                    format: bytes32
                    example: "0x..."
  /instruction/details:
    get:
      description: Get details about an instruction by its ID
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  format: address
                  description: Address of the user
                  example: "0x..."
                chainId:
                  type: integer
                  format: int64
                  description: Chain ID of the instruction
                instructionId:
                  type: string
                  format: bytes32
                  description: Instruction ID
                  example: "0x..."
      responses:
        '200':
          description: Instruction details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInstructionDetailsResponse'
  /instructions/all:
    get:
      description: Get all instructions and their details for a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - address
              properties:
                address:
                  type: string
                  format: address
                  description: Address of the user
                  example: "0x..."
      responses:
        '200':
          description: Instructions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoredInstruction'

  /instructions/chain:
    get:
      description: Get instructions for a specific chain
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  type: integer
                  format: int64
      responses:
        '200':
          description: Chain instructions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoredInstruction'

  /instructions/summary:
    get:
      description: Get instruction execution summaries
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Instruction summaries retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DurationInstructionSummary'

  /instruction/deactivate:
    post:
      description: Deactivate an instruction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                instructionId:
                  type: string
                  format: bytes32
                deactivationSignature:
                  type: string
      responses:
        '200':
          description: Instruction deactivated successfully

  /transactions:
    get:
      description: Get transactions for a user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDTO'

components:
  schemas:
    TokenERC20:
      type: string
      description: Available tokens to use
      enum:
        - USDC
        - USDT
      example: "USDC"
    TokenFee:
      type: string
      description: Available fee tokens to use
      enum:
        - ETH
        - USDC
      example: "ETH"
    OtimFee:
      type: object
      required:
        - value
        - token
      properties:
        value:
          type: integer
          format: uint256
          description: Fee value in token decimals
          example: 1000000000000000000
        token:
          $ref: '#/components/schemas/TokenFee'
    IntervalSchedule:
      type: object
      required:
        - startAt
        - startBy
        - interval
        - timeout
      properties:
        startAt:
          type: integer
          format: uint256
          description: Unix timestamp to activate the action
        startBy:
          type: integer
          format: uint256
          description: Unix timestamp by which the action must be activated
        interval:
          type: integer
          format: uint256
          description: Interval between action executions (in seconds)
        timeout:
          type: integer
          format: uint256
          description: Timeout after which the execution is not valid (in seconds)
    ActionArguments:
      type: object
      oneOf:
        - title: RefuelERC20
          type: object
          required:
            - refuelERC20
          properties:
            refuelERC20:
              type: object
              required:
                - token
                - target
                - threshold
                - endBalance
                - fee
              properties:
                token:
                  $ref: '#/components/schemas/TokenERC20'
                target:
                  type: string
                  format: address
                  description: Address of the refuel recipient
                  example: "0x..."
                threshold:
                  type: integer
                  format: uint256
                  description: Balance threshold that triggers refuel
                endBalance:
                  type: integer
                  format: uint256
                  description: Target balance after refuel
                fee:
                  $ref: '#/components/schemas/OtimFee'
        - title: Refuel
          type: object
          required:
            - refuel
          properties:
            refuel:
              type: object
              required:
                - target
                - threshold
                - endBalance
                - fee
              properties:
                target:
                  type: string
                  format: address
                  description: Address of the refuel recipient
                  example: "0x..."
                threshold:
                  type: integer
                  format: uint256
                  description: Balance threshold that triggers refuel
                endBalance:
                  type: integer
                  format: uint256
                  description: Target balance after refuel
                fee:
                  $ref: '#/components/schemas/OtimFee'
        - title: TransferERC20
          type: object
          required:
            - transferERC20
          properties:
            transferERC20:
              type: object
              required:
                - token
                - target
                - value
                - schedule
                - fee
              properties:
                token:
                  $ref: '#/components/schemas/TokenERC20'
                target:
                  type: string
                  format: address
                  description: Address of the transfer recipient
                  example: "0x..."
                value:
                  type: integer
                  format: uint256
                  description: Amount to transfer
                schedule:
                  $ref: '#/components/schemas/IntervalSchedule'
                fee:
                  $ref: '#/components/schemas/OtimFee'
        - title: Transfer
          type: object
          required:
            - transfer
          properties:
            transfer:
              type: object
              required:
                - target
                - value
                - schedule
                - fee
              properties:
                target:
                  type: string
                  format: address
                  description: Address of the transfer recipient
                  example: "0x..."
                value:
                  type: integer
                  format: uint256
                  description: Amount to transfer
                schedule:
                  $ref: '#/components/schemas/IntervalSchedule'
                fee:
                  $ref: '#/components/schemas/OtimFee'
      discriminator:
        propertyName: type
        mapping:
          refuelERC20: '#/components/schemas/ActionArguments/oneOf/0'
          refuel: '#/components/schemas/ActionArguments/oneOf/1'
          transferERC20: '#/components/schemas/ActionArguments/oneOf/2'
          transfer: '#/components/schemas/ActionArguments/oneOf/3'
    PrimitiveSignature:
      type: object
      properties:
        yParity:
          type: number
          description: Y parity of the signature
          enum: [0, 1]
        r:
          type: string
          format: bytes
          description: R of the signature
          example: "0x..."
        s:
          type: string
          format: bytes
          description: S of the signature
          example: "0x..."
    StoredSignature:
      type: object
      properties:
        v:
          type: number
          description: V of the signature
          enum: [27, 28]
        r:
          type: string
          format: bytes
          description: R of the signature
          example: "0x..."
        s:
          type: string
          format: bytes
          description: S of the signature
          example: "0x..."
    Instruction:
      type: object
      properties:
        salt:
          type: integer
          format: uint64
          description: Salt to ensure instruction is unique
        maxExecutions:
          type: integer
          format: uint64
          description: Maximum number of times this instruction can be executed
        action:
          type: string
          format: address
          description: Action contract address
          example: "0x..."
        arguments:
          type: string
          format: bytes
          description: Arguments to execute on the action contract
          example: "0x..."
    BuildInstructionRequest:
      type: object
      required:
        - address
        - chainId
        - salt
        - maxExecutions
        - action
        - actionArguments
      properties:
        address:
          type: string
          format: address
          description: Address of the user
          example: "0x..."
        chainId:
          type: integer
          format: uint64
          description: Chain ID
        salt:
          type: integer
          format: uint64
          description: Salt to ensure instruction is unique
        maxExecutions:
          type: integer
          format: uint64
          description: Maximum number of times this instruction can be executed
        actionArguments:
          $ref: '#/components/schemas/ActionArguments'
    BuildInstructionResponse:
      type: object
      properties:
        salt:
          type: integer
          format: uint64
          description: Salt to ensure instruction is unique
        maxExecutions:
          type: integer
          format: uint64
          description: Maximum number of times this instruction can be executed
        action:
          type: string
          format: address
          description: Action contract address
          example: "0x..."
        arguments:
          type: string
          format: bytes
          description: Arguments to execute on the action contract
          example: "0x..."
    NewInstructionRequest:
      type: object
      required:
        - address
        - chainId
        - salt
        - maxExecutions
        - action
        - arguments
        - activationSignature
      properties:
        address:
          type: string
          format: address
          description: Address of the user
          example: "0x..."
        chainId:
          type: integer
          format: uint64
          description: Chain ID
        salt:
          type: integer
          format: uint64
          description: Salt to ensure instruction is unique
        maxExecutions:
          type: integer
          format: uint64
          description: Maximum number of times this instruction can be executed
        action:
          type: string
          format: address
          description: Action contract address
          example: "0x..."
        arguments:
          type: string
          format: bytes
          description: Arguments to execute on the action contract
          example: "0x..."
        activationSignature:
          description: User signature over the activation hash
          $ref: '#/components/schemas/PrimitiveSignature'
        nickname:
          type: string
          description: Nickname for the instruction
          example: "My cool instruction"
    GetInstructionDetailsResponse:
      type: object
      properties:
        actionName:
          type: string
          description: Name of the action
          example: "Refuel"
        salt:
          type: integer
          format: uint64
          description: Salt to ensure instruction is unique
        maxExecutions:
          type: integer
          format: uint64
          description: Maximum number of times this instruction can be executed
        action:
          type: string
          format: address
          description: Action contract address
          example: "0x..."
        arguments:
          type: string
          format: bytes
          description: Arguments to execute on the action contract
          example: "0x..."
        nickname:
          type: string
          description: Nickname for the instruction
          example: "My cool instruction"
    StoredInstruction:
      type: object
      properties:
        createdAtUnix:
          type: integer
          format: int64
          description: Unix timestamp of when the instruction was created
        updatedAtUnix:
          type: integer
          format: int64
          description: Unix timestamp of when the instruction was last updated
        address:
          type: string
          description: Address of the user
          example: "0x..."
        chainId:
          type: integer
          format: int64
          description: Chain ID for the instruction
        instruction:
          $ref: '#/components/schemas/Instruction'
        instructionId:
          type: string
          format: bytes32
          description: Unique identifier for the instruction
          example: "0x..."
        activationSignature:
          $ref: '#/components/schemas/StoredSignature'
        deactivationSignature:
          type: object
          nullable: true
          $ref: '#/components/schemas/StoredSignature'
        executionStatus:
          type: string
          enum: [PendingActivation, Active, PendingDeactivation, Deactivated, Completed, Errored]
        executionCounter:
          type: integer
          format: uint64
          description: Number of times the instruction has been executed
        lastExecutedUnix:
          type: integer
          format: int64
          description: Unix timestamp of when the instruction was last executed
        nextExecutionUnix:
          type: integer
          format: int64
          description: Unix timestamp of when the instruction will be executed next (`lastExecutedUnix + interval`)
        nickname:
          type: string
          nullable: true
          description: Nickname for the instruction
          example: "My cool instruction"

    DurationInstructionSummary:
      type: object
      properties:
        instructionId:
          type: string
          format: bytes32
        chainId:
          type: integer
          format: int64
        executionCount:
          type: integer
          format: uint64
        wasActivatedDuring:
          type: boolean
        lateCount:
          type: integer
          format: uint64
        onTimeCount:
          type: integer
          format: uint64

    TransactionDTO:
      type: object
      properties:
        createdAtUnix:
          type: integer
          format: int64
        updatedAtUnix:
          type: integer
          format: int64
        transactionHash:
          type: string
          format: bytes32
        chainId:
          type: integer
          format: int64
        address:
          type: string
        instructionId:
          type: string
          format: bytes32
        startedAtUnix:
          type: integer
          format: int64
        finishedAtUnix:
          type: integer
          format: int64
        startedAtBlock:
          type: integer
          format: uint64
        finishedAtBlock:
          type: integer
          format: uint64
          nullable: true
        blockHash:
          type: string
          format: bytes32
          nullable: true
        activation:
          type: boolean
        deactivation:
          type: boolean
        errorMessage:
          type: string
          nullable: true
        transactionStatus:
          type: string
          enum: [PENDING, CONFIRMED, FAILED]

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for API authentication 